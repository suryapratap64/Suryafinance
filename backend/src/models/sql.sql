-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create security_master table
CREATE TABLE securities_master (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    symbol VARCHAR(50) NOT NULL,
    name VARCHAR(255) NOT NULL,
    security_type VARCHAR(20) CHECK (security_type IN ('STOCK', 'MUTUAL_FUND')),
    isin VARCHAR(20),
    exchange VARCHAR(10),
    last_price DECIMAL(15,4),
    last_updated TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    CONSTRAINT unique_symbol UNIQUE (symbol),
    CONSTRAINT unique_isin UNIQUE (isin)
);

-- Create transactions table
CREATE TABLE transactions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id),
    security_id BIGINT REFERENCES securities_master(id),
    transaction_type VARCHAR(4) CHECK (transaction_type IN ('BUY', 'SELL')),
    transaction_date DATE NOT NULL,
    quantity DECIMAL(15,4) NOT NULL,
    price_per_unit DECIMAL(15,4) NOT NULL,
    total_amount DECIMAL(20,4) NOT NULL,
    source VARCHAR(50) DEFAULT 'MANUAL',
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create Row Level Security (RLS) policies
ALTER TABLE transactions ENABLE ROW LEVEL SECURITY;

-- Users can only see and modify their own transactions
CREATE POLICY "Users can manage their own transactions"
ON transactions
FOR ALL
USING (auth.uid() = user_id);

-- Everyone can read securities_master
ALTER TABLE securities_master ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Everyone can read securities"
ON securities_master
FOR SELECT
USING (true);

-- Only authenticated users can insert into securities_master
CREATE POLICY "Authenticated users can insert securities"
ON securities_master
FOR INSERT
WITH CHECK (auth.role() = 'authenticated');