import { supabaseAdmin } from "../lib/supabaseAdmin";
import { createTables, setupRLS, seedData } from "./schema";


/*
Perfect üëç you‚Äôre basically asking me to condense this controller vs service architecture into crisp ‚Äúrevision notes‚Äù ‚Äî the kind of points you‚Äôd keep in mind for an interview or repo review.
Here‚Äôs a structured note format you can revise quickly:

üìù Supabase Project ‚Äî Controller/Service Separation (Revision Notes)
1Ô∏è‚É£ Controllers (HTTP layer only)

Location: backend/src/controllers.ts

Responsibilities:

Accept HTTP request (req/res).

Validate body/params (zod/Joi/simple checks).

Assume req.user is already set by auth.ts middleware.

Call services for actual logic.

Map service result ‚Üí HTTP response (200/201, 4xx/5xx).

üö´ Should NOT:

Query Supabase directly.

Contain business logic.

2Ô∏è‚É£ Services (business logic + DB access)

Location: backend/src/services/*.ts

Responsibilities:

Contain all Supabase queries (supabaseAdmin.from('...').select/insert).

Encapsulate domain logic (e.g., compute totals, validate holdings).

Call stored functions via supabaseAdmin.rpc('exec_sql', ...).

Handle consistency (transactions/policies).

Uses: backend/src/lib/supabaseAdmin.ts

Service role key ‚Üí server-only.

Example:

const { data, error } = await supabaseAdmin
  .from('transactions')
  .insert(payload)
  .select();

3Ô∏è‚É£ Why separation matters (esp. with Supabase)

Single responsibility: Controllers handle HTTP, Services handle Supabase/logic.

Replaceability: Easy to swap persistence (Supabase ‚Üí Postgres/ORM).

Security: service_role usage centralized in services (never exposed frontend).

Clarity: All Supabase semantics (RLS, RPC, functions) live in one place.

4Ô∏è‚É£ Practical rules / patterns

‚úÖ Use supabaseAdmin only in services.

‚úÖ Controllers never touch Supabase directly.

‚úÖ Auth middleware verifies token:

const { data } = await supabaseAdmin.auth.getUser(token);
req.user = { id: data.user.id, ... };


‚úÖ Pass req.user.id into services for per-user ops.

‚úÖ Adjust RLS if errors like "new row violates row-level security" appear.

‚úÖ Use service_role for:

Admin-only ops (migrations, seeding).

Backend tasks bypassing RLS.

5Ô∏è‚É£ Refactor checklist (repo-specific)

üî≤ Remove Sequelize model calls in controllers.

üî≤ Replace with Service.method(...).

üî≤ Ensure all services use Supabase queries.

üî≤ Auth middleware sets req.user.

üî≤ Migration SQL matches table/service expectations.

üî≤ Remove legacy utils (JWT generation, old ORM code).

6Ô∏è‚É£ Example (minimal pattern)

Service (TransactionService.ts):

export const createTransaction = async (payload) => {
  return await supabaseAdmin.from('transactions').insert(payload).select();
};


Controller (TransactionController.ts):

export const create = async (req, res) => {
  try {
    const data = await TransactionService.createTransaction({
      ...req.body,
      user_id: req.user.id,
    });
    res.status(201).json(data);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

7Ô∏è‚É£ Testing & QA

Unit test services (mock supabaseAdmin).

Integration test with migrations + RLS policies.

Frontend must send Authorization: Bearer <token>.

‚úÖ Quick recall tagline:
üëâ Controllers = HTTP wrappers | Services = Supabase + rules | Auth middleware = attach req.user | Migrations = structure + RLS.
*/

export const initializeDatabase = async () => {
  try {
    console.log("Starting database initialization...");

    // Create tables
    await createTables(supabaseAdmin);

    // Setup Row Level Security policies
    await setupRLS(supabaseAdmin);

    // Seed initial data if needed
    await seedData(supabaseAdmin);

    console.log("Database initialization completed successfully");
  } catch (error) {
    console.error("Database initialization failed:", error);
    throw error;
  }
};

// Function to check if tables exist
export const checkDatabaseSetup = async () => {
  try {
    const { data: tables, error } = await supabaseAdmin
      .from("securities_master")
      .select("id")
      .limit(1);

    if (error) {
      // If there's an error, tables might not exist
      return false;
    }

    return true;
  } catch (error) {
    return false;
  }
};
