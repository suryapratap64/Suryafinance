import { SupabaseClient } from "@supabase/supabase-js";

// Supabase schema.ts Note (Short Version)

// schema.ts is optional; currently calls non-existent RPCs (create_securities_table / setup_rls) → will fail as-is.

// Recommended approach: pick one method to avoid conflicts:

// Preferred: Use SQL migration files + migrationRunner; remove or archive schema.ts.

// Alternative: Keep schema.ts but convert its functions to call exec_sql or use a direct pg Pool.

// Why: Running both migrations and schema.ts may duplicate table creation; migrationRunner via exec_sql is canonical.

// Gotchas:

// exec_sql must exist before calling adminClient.rpc("exec_sql").

// Execute whole SQL atomically if using $$ functions.

// Avoid accidental runs by removing/archive schema.ts if using migrations.

// ✅ Next step: choose either remove/archive schema.ts or convert it to use exec_sql.

export const createTables = async (adminClient: SupabaseClient) => {
  try {
    // Create securities_master table
    const { error: securitiesError } = await adminClient.rpc(
      "create_securities_table",
      {
        sql: `
        CREATE TABLE IF NOT EXISTS securities_master (
          id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          symbol VARCHAR(50) NOT NULL,
          name VARCHAR(255) NOT NULL,
          security_type VARCHAR(20) CHECK (security_type IN ('STOCK', 'MUTUAL_FUND')),
          isin VARCHAR(20),
          exchange VARCHAR(10),
          last_price DECIMAL(15,4),
          last_updated TIMESTAMPTZ,
          created_at TIMESTAMPTZ DEFAULT NOW(),
          CONSTRAINT unique_symbol UNIQUE (symbol),
          CONSTRAINT unique_isin UNIQUE (isin)
        );
      `,
      }
    );

    if (securitiesError) throw securitiesError;

    // Create transactions table
    const { error: transactionsError } = await adminClient.rpc(
      "create_transactions_table",
      {
        sql: `
        CREATE TABLE IF NOT EXISTS transactions (
          id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          user_id UUID REFERENCES auth.users(id),
          security_id BIGINT REFERENCES securities_master(id),
          transaction_type VARCHAR(4) CHECK (transaction_type IN ('BUY', 'SELL')),
          transaction_date DATE NOT NULL,
          quantity DECIMAL(15,4) NOT NULL,
          price_per_unit DECIMAL(15,4) NOT NULL,
          total_amount DECIMAL(20,4) NOT NULL,
          source VARCHAR(50) DEFAULT 'MANUAL',
          created_at TIMESTAMPTZ DEFAULT NOW()
        );
      `,
      }
    );

    if (transactionsError) throw transactionsError;

    console.log("Tables created successfully");
  } catch (error) {
    console.error("Error creating tables:", error);
    throw error;
  }
};

export const setupRLS = async (adminClient: SupabaseClient) => {
  try {
    // Enable RLS on tables
    const { error: rlsError } = await adminClient.rpc("setup_rls", {
      sql: `
        -- Enable RLS on securities_master
        ALTER TABLE securities_master ENABLE ROW LEVEL SECURITY;

        -- Enable RLS on transactions
        ALTER TABLE transactions ENABLE ROW LEVEL SECURITY;

        -- Create policies for securities_master
        CREATE POLICY IF NOT EXISTS "Everyone can read securities"
          ON securities_master
          FOR SELECT
          USING (true);

        CREATE POLICY IF NOT EXISTS "Authenticated users can insert securities"
          ON securities_master
          FOR INSERT
          WITH CHECK (auth.role() = 'authenticated');

        -- Create policies for transactions
        CREATE POLICY IF NOT EXISTS "Users can manage their own transactions"
          ON transactions
          FOR ALL
          USING (auth.uid() = user_id);
      `,
    });

    if (rlsError) throw rlsError;

    console.log("RLS policies set up successfully");
  } catch (error) {
    console.error("Error setting up RLS:", error);
    throw error;
  }
};

export const seedData = async (adminClient: SupabaseClient) => {
  try {
    // Sample securities data
    const securities = [
      {
        symbol: "RELIANCE",
        name: "Reliance Industries Ltd",
        security_type: "STOCK",
        exchange: "NSE",
        isin: "INE002A01018",
      },
      {
        symbol: "HDFCBANK",
        name: "HDFC Bank Ltd",
        security_type: "STOCK",
        exchange: "NSE",
        isin: "INE040A01034",
      },
    ];

    const { error: seedError } = await adminClient
      .from("securities_master")
      .upsert(securities, {
        onConflict: "symbol",
        ignoreDuplicates: true,
      });

    if (seedError) throw seedError;

    console.log("Sample data seeded successfully");
  } catch (error) {
    console.error("Error seeding data:", error);
    throw error;
  }
};
