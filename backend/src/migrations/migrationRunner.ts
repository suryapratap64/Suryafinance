import fs from "fs";
import path from "path";
import { supabaseAdmin } from "../lib/supabaseAdmin";

// Read all SQL files from migrations directory
const getMigrationFiles = () => {
  const migrationsDir = path.join(__dirname, "sql");
  return fs
    .readdirSync(migrationsDir)
    .filter((file) => file.endsWith(".sql"))
    .sort()
    .map((file) => ({
      name: file,
      content: fs.readFileSync(path.join(migrationsDir, file), "utf8"),
    }));
};

// Execute raw SQL safely
const executeSQL = async (sql: string) => {
  try {
    // Split SQL into individual statements
    const statements = sql
      .split(";")
      .map((stmt) => stmt.trim())
      .filter((stmt) => stmt.length > 0);

    // Execute each statement separately
    for (const statement of statements) {
      const { error } = await supabaseAdmin.rpc("exec_sql", {
        query: statement + ";",
      });
      if (error) throw error;
    }
  } catch (err) {
    throw new Error(`SQL execution failed: ${(err as Error).message}`);
  }
};

export const runMigrations = async () => {
  try {
    console.log("Starting migrations...");

    // 1Ô∏è‚É£ Create migrations table if it doesn't exist
    const createMigrationsTableSQL = `
      CREATE TABLE IF NOT EXISTS public.migrations (
        id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        name VARCHAR(255) NOT NULL UNIQUE,
        executed_at TIMESTAMPTZ DEFAULT NOW()
      );
    `;
    await executeSQL(createMigrationsTableSQL);
    console.log("‚úÖ migrations table ready");

    // 2Ô∏è‚É£ Fetch already executed migrations
    const { data: executedMigrations, error: selectError } = await supabaseAdmin
      .from("migrations")
      .select("name");

    if (selectError) throw selectError;

    const executedMigrationNames = executedMigrations?.map((m) => m.name) || [];

    // 3Ô∏è‚É£ Run pending migrations
    const migrationFiles = getMigrationFiles();
    for (const migration of migrationFiles) {
      if (!executedMigrationNames.includes(migration.name)) {
        console.log(`Running migration: ${migration.name}`);

        // Record successful migration
        const { error: insertError } = await supabaseAdmin
          .from("migrations")
          .insert({ name: migration.name });
        if (insertError) throw insertError;

        console.log(`‚úÖ Completed migration: ${migration.name}`);
      } else {
        console.log(`Skipping already executed migration: ${migration.name}`);
      }
    }

    console.log("üéâ All migrations completed successfully");
  } catch (error) {
    console.error("Migration failed:", error);
    throw error;
  }
};
